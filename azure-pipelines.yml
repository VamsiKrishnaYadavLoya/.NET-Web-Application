pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  stagingAppName: 'Staging-Environment'
  productionAppName: 'Production-Environment'
  stagingServiceConnection: 'ARMService-Staging'
  productionServiceConnection: 'ARMService'
  location: 'East US'

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\VamsiWebApplication.zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.303'

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'Build solution'

    - script: dotnet test
      displayName: 'Running Unit Tests'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/VamsiWebApplication'
        zipAfterPublish: true

    - publish: $(Build.ArtifactStagingDirectory)/VamsiWebApplication
      artifact: drop

- stage: Deploy_Staging
  dependsOn: Build
  jobs:
  - job: Deploy
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: drop

    - script: |
        echo "Deploying to staging environment"
        # Add your deployment commands here, e.g., using Azure CLI or other deployment tools
        echo "Deployment commands for staging"
      displayName: 'Deploy to Staging'

- stage: Deploy_Production
  dependsOn: Deploy_Staging
  condition: succeeded()
  jobs:
  - job: Deploy
    pool:
      vmImage: 'windows-latest'
    steps:
    - download: current
      artifact: drop

    - script: |
        echo "Deploying to production environment"
        # Add your deployment commands here, e.g., using Azure CLI or other deployment tools
        echo "Deployment commands for production"
      displayName: 'Deploy to Production'